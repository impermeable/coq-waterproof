(******************************************************************************)
(*                  This file is part of Waterproof-lib.                      *)
(*                                                                            *)
(*   Waterproof-lib is free software: you can redistribute it and/or modify   *)
(*    it under the terms of the GNU General Public License as published by    *)
(*     the Free Software Foundation, either version 3 of the License, or      *)
(*                    (at your option) any later version.                     *)
(*                                                                            *)
(*     Waterproof-lib is distributed in the hope that it will be useful,      *)
(*      but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *)
(*               GNU General Public License for more details.                 *)
(*                                                                            *)
(*     You should have received a copy of the GNU General Public License      *)
(*   along with Waterproof-lib. If not, see <https://www.gnu.org/licenses/>.  *)
(*                                                                            *)
(******************************************************************************)

DECLARE PLUGIN "coq-waterproof.plugin"

{
open Exceptions
open Waterprove
open Vernacextend
open G_vernac
open Ltac2_plugin
open Ltac2_plugin.G_ltac2

let waterproof_version : string = "2.2.0+dev"

let wp_command_entry = Procq.Entry.make "waterproof_command"
let wp_tactic_entry = Procq.Entry.make "waterproof_tactic"
let _wp_tactic_entry = wp_tactic_entry

let wp_entry_name = Names.Id.of_string "waterproof_tactic"

let () = Hashtbl.add Tac2entries.hack_table_entry wp_entry_name wp_tactic_entry

let _ : Pvernac.proof_mode = Pvernac.register_proof_mode "Waterproof"
    (ProofMode {
        command_entry = wp_command_entry;
        wit_tactic_expr = Tac2env.wit_ltac2_tac;
        tactic_expr_entry = wp_tactic_entry;
      })

(* Duplicated with g_ltac2 *)
let pr_ltac2expr e = Tac2print.pr_rawexpr_gen E5 ~avoid:Names.Id.Set.empty e



}

VERNAC ARGUMENT EXTEND wp_tactic_entry
PRINTED BY { pr_ltac2expr }
| [ _wp_tactic_entry(e) ] -> { e }
END

VERNAC { wp_command_entry } EXTEND VernacLtac2Alt
| ![proof] [ wp_tactic_entry(t) "." ] =>
  { classify_as_proofstep } -> { fun ~pstate ->
    Tac2entries.call ~pstate None ~with_end_tac:false t
  }
END

GRAMMAR EXTEND Gram
  GLOBAL: wp_command_entry;
  wp_command_entry: TOP
    [ [ p = subprf -> { Vernacexpr.VernacSynPure p }
      | g = OPT toplevel_selector; p = subprf_with_selector -> { Vernacexpr.VernacSynPure (p g) }
      ] ];
END

(* Rest of waterproof *)
VERNAC COMMAND EXTEND AutomationShieldEnableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Enable" "Automation" "Shield" ] ->
    {
      automation_shield := true
    }
END

VERNAC COMMAND EXTEND AutomationShieldDisableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Disable" "Automation" "Shield" ] ->
    {
      automation_shield := false
    }
END

VERNAC COMMAND EXTEND AutomationDebugEnableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Enable" "Debug" "Automation" ] ->
    {
      automation_debug := true
    }
END

VERNAC COMMAND EXTEND AutomationDebugDisableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Disable" "Debug" "Automation" ] ->
    {
      automation_debug := false
    }
END

VERNAC COMMAND EXTEND AutomationPrintRewriteHintsEnableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Enable" "Printing" "Rewrite" "Hints"] ->
    {
      print_rewrite_hints := true
    }
END

VERNAC COMMAND EXTEND AutomationPrintRewriteHintsDisableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Disable" "Printing" "Rewrite" "Hints" ] ->
    {
      print_rewrite_hints := false
    }
END

VERNAC COMMAND EXTEND PrintHypothesisHelpEnableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Enable" "Hypothesis" "Help" ] ->
    {
      print_hypothesis_help := true
    }
  END

VERNAC COMMAND EXTEND PrintHypothesisHelpDisableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Disable" "Hypothesis" "Help" ] ->
    {
      print_hypothesis_help := false
    }
  END

VERNAC COMMAND EXTEND PrintVersionSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Print" "Version" ] ->
    {
      Feedback.msg_notice (Pp.str waterproof_version)
    }
END

VERNAC COMMAND EXTEND RedirectWarningsEnableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Enable" "Redirect" "Feedback" ] ->
    {
      redirect_feedback := true
    }
END

VERNAC COMMAND EXTEND RedirectWarningsDisableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Disable" "Redirect" "Feedback" ] ->
    {
      redirect_feedback := false
    }
END


VERNAC COMMAND EXTEND RedirectErrorsEnableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Enable" "Redirect" "Errors" ] ->
    {
      redirect_errors := true
    }
END

VERNAC COMMAND EXTEND RedirectErrorsDisableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Disable" "Redirect" "Errors" ] ->
    {
      redirect_errors := false
    }
END

VERNAC COMMAND EXTEND AddWpLoggerSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Enable" "Logging" ] ->
    {
      add_wp_feedback_logger ()
    }
END
