(******************************************************************************)
(*                  This file is part of Waterproof-lib.                      *)
(*                                                                            *)
(*   Waterproof-lib is free software: you can redistribute it and/or modify   *)
(*    it under the terms of the GNU General Public License as published by    *)
(*     the Free Software Foundation, either version 3 of the License, or      *)
(*                    (at your option) any later version.                     *)
(*                                                                            *)
(*     Waterproof-lib is distributed in the hope that it will be useful,      *)
(*      but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *)
(*               GNU General Public License for more details.                 *)
(*                                                                            *)
(*     You should have received a copy of the GNU General Public License      *)
(*   along with Waterproof-lib. If not, see <https://www.gnu.org/licenses/>.  *)
(*                                                                            *)
(******************************************************************************)

DECLARE PLUGIN "coq-waterproof.plugin"

{
open Exceptions
open Waterprove

let waterproof_version : string = "2.2.0+8.17"

(* Temporary hack to add lconstr and open_lconstr to Ltac2 **)
(* This enables many tactics without parentheses **)
module Ltac2Extension = struct

  let add_scope s f =
    let open Ltac2_plugin in
    Tac2entries.register_scope (Names.Id.of_string s) f
  
  let rec pr_scope =
    let open Ltac2_plugin in
    let open Tac2expr in
    let open CAst in function
      | SexprStr {v=s; _} -> Pp.qstring s
      | SexprInt {v=n; _} -> Pp.int n
      | SexprRec (_, {v=na; _}, args) ->
        let na = match na with
          | None -> Pp.str "_"
          | Some id -> Names.Id.print id
        in
        Pp.(na ++ str "(" ++ prlist_with_sep (fun () -> str ", ") pr_scope args ++ str ")")
  
  let scope_fail s args =
    let open Pp in
    let args = str "(" ++ prlist_with_sep (fun () -> str ", ") pr_scope args ++ str ")" in
    CErrors.user_err (str "Invalid arguments " ++ args ++ str " in scope " ++ str s)
  
  let () = add_scope "lconstr" (fun arg ->
    let open Ltac2_plugin in
    let delimiters = List.map (function
        | Tac2expr.SexprRec (_, { v = Some s ;_}, []) -> s
        | _ -> scope_fail "lconstr" arg)
        arg
    in
    
    let act e = Tac2quote.of_constr ~delimiters e in
    Tac2entries.ScopeRule (Pcoq.Symbol.nterm Pcoq.Constr.lconstr, act)
    )
  
  let () = add_scope "open_lconstr" (fun arg ->
    let open Ltac2_plugin in
    let delimiters = List.map (function
        | Tac2expr.SexprRec (_, { v = Some s ; _}, []) -> s
        | _ -> scope_fail "open_.constr" arg)
        arg
    in
    let act e = Tac2quote.of_open_constr ~delimiters e in
    Tac2entries.ScopeRule (Pcoq.Symbol.nterm Pcoq.Constr.lconstr, act)
    )
  
  end

}

VERNAC COMMAND EXTEND AutomationShieldEnableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Enable" "Automation" "Shield" ] ->
    {
      automation_shield := true
    }
END

VERNAC COMMAND EXTEND AutomationShieldDisableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Disable" "Automation" "Shield" ] ->
    {
      automation_shield := false
    }
END

VERNAC COMMAND EXTEND AutomationDebugEnableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Enable" "Debug" "Automation" ] ->
    {
      automation_debug := true
    }
END

VERNAC COMMAND EXTEND AutomationDebugDisableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Disable" "Debug" "Automation" ] ->
    {
      automation_debug := false
    }
END

VERNAC COMMAND EXTEND AutomationPrintRewriteHintsEnableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Enable" "Printing" "Rewrite" "Hints"] ->
    {
      print_rewrite_hints := true
    }
END

VERNAC COMMAND EXTEND AutomationPrintRewriteHintsDisableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Disable" "Printing" "Rewrite" "Hints" ] ->
    {
      print_rewrite_hints := false
    }
END

VERNAC COMMAND EXTEND PrintHypothesisHelpEnableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Enable" "Hypothesis" "Help" ] ->
    {
      print_hypothesis_help := true
    }
  END

VERNAC COMMAND EXTEND PrintHypothesisHelpDisableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Disable" "Hypothesis" "Help" ] ->
    {
      print_hypothesis_help := false
    }
  END

VERNAC COMMAND EXTEND PrintVersionSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Print" "Version" ] ->
    {
      Feedback.msg_notice (Pp.str waterproof_version)
    }
END

VERNAC COMMAND EXTEND RedirectWarningsEnableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Enable" "Redirect" "Feedback" ] ->
    {
      redirect_feedback := true
    }
END

VERNAC COMMAND EXTEND RedirectWarningsDisableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Disable" "Redirect" "Feedback" ] ->
    {
      redirect_feedback := false
    }
END


VERNAC COMMAND EXTEND RedirectErrorsEnableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Enable" "Redirect" "Errors" ] ->
    {
      redirect_errors := true
    }
END

VERNAC COMMAND EXTEND RedirectErrorsDisableSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Disable" "Redirect" "Errors" ] ->
    {
      redirect_errors := false
    }
END

VERNAC COMMAND EXTEND AddWpLoggerSideEff CLASSIFIED AS SIDEFF
  | [ "Waterproof" "Enable" "Logging" ] ->
    {
      add_wp_feedback_logger ()
    }
END
